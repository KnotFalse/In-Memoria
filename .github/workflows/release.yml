name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: npm run build:macos
            
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build:macos-arm
            
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build:windows
            
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build
            
    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          registry-url: https://registry.npmjs.org/
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: ${{ matrix.settings.build }}
        
      - name: Copy binary to platform package
        shell: bash
        run: |
          TARGET="${{ matrix.settings.target }}"
          case "$TARGET" in
            x86_64-unknown-linux-gnu) PLATFORM="linux-x64" ;;
            x86_64-apple-darwin) PLATFORM="darwin-x64" ;;
            aarch64-apple-darwin) PLATFORM="darwin-arm64" ;;
            x86_64-pc-windows-msvc) PLATFORM="win32-x64" ;;
          esac
          
          mkdir -p npm/$PLATFORM
          cp rust-core/*.node npm/$PLATFORM/
          
      - name: Publish platform package
        shell: bash
        run: |
          TARGET="${{ matrix.settings.target }}"
          case "$TARGET" in
            x86_64-unknown-linux-gnu) PLATFORM="linux-x64" ;;
            x86_64-apple-darwin) PLATFORM="darwin-x64" ;;
            aarch64-apple-darwin) PLATFORM="darwin-arm64" ;;
            x86_64-pc-windows-msvc) PLATFORM="win32-x64" ;;
          esac
          
          cd npm/$PLATFORM
          
          # Check if binary exists before publishing
          if [ ! -f *.node ]; then
            echo "‚ùå No .node file found in npm/$PLATFORM"
            exit 1
          fi
          
          echo "üì¶ Publishing $PLATFORM package..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: startsWith(github.ref, 'refs/tags/v')
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            rust-core/*.node
            dist/
          if-no-files-found: error

  publish:
    name: Publish main package to npm
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          registry-url: https://registry.npmjs.org/
          
      - name: Install dependencies
        run: npm install
        
      - name: Build TypeScript (without Rust)
        run: tsc && npm run copy-assets
          
      - name: Publish main package to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}