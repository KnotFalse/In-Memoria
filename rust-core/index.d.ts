/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class AstParser {
  constructor()
  parseCode(code: string, language: string): ParseResult
  queryAst(code: string, language: string, queryString: string): Array<AstNode>
  getSymbols(code: string, language: string): Array<symbol>
  getNodeAtPosition(code: string, language: string, line: number, column: number): AstNode | null
  analyzeComplexity(code: string, language: string): Record<string, number>
}

export declare class PatternLearner {
  constructor()
  /**
   * Learns patterns from analyzing an entire codebase
   *
   * # Safety
   * This function uses unsafe because it needs to interact with the Node.js runtime
   * through N-API bindings. The caller must ensure the path exists and is readable.
   */
  learnFromCodebase(path: string): Promise<Array<Pattern>>
  extractPatterns(path: string): Promise<Array<Pattern>>
  analyzeFileChange(changeData: string): Promise<PatternAnalysisResult>
  findRelevantPatterns(problemDescription: string, currentFile?: string | undefined | null, selectedCode?: string | undefined | null): Promise<Array<Pattern>>
  predictApproach(problemDescription: string, context: Record<string, string>): Promise<ApproachPrediction>
  /**
   * Updates patterns based on analysis data
   *
   * # Safety
   * This function uses unsafe because it needs to interact with the Node.js runtime
   * through N-API bindings. The caller must ensure the analysis data is valid JSON.
   */
  learnFromAnalysis(analysisData: string): Promise<boolean>
  /**
   * Updates patterns based on file changes
   *
   * # Safety
   * This function uses unsafe because it needs to interact with the Node.js runtime
   * through N-API bindings. The caller must ensure the change data is valid JSON.
   */
  updateFromChange(changeData: string): Promise<boolean>
}

export declare class SemanticAnalyzer {
  constructor()
  /**
   * Analyzes an entire codebase for semantic concepts and patterns
   *
   * # Safety
   * This function uses unsafe because it needs to interact with the Node.js runtime
   * through N-API bindings. The caller must ensure the path exists and is readable.
   */
  analyzeCodebase(path: string): Promise<CodebaseAnalysisResult>
  /**
   * Analyzes the content of a specific file for semantic concepts
   *
   * # Safety
   * This function uses unsafe because it needs to interact with the Node.js runtime
   * through N-API bindings. The caller must ensure the file content is valid UTF-8.
   */
  analyzeFileContent(filePath: string, content: string): Promise<Array<SemanticConcept>>
  /**
   * Learns semantic concepts from analyzing an entire codebase
   *
   * # Safety
   * This function uses unsafe because it needs to interact with the Node.js runtime
   * through N-API bindings. The caller must ensure the path exists and is readable.
   */
  learnFromCodebase(path: string): Promise<Array<SemanticConcept>>
  /**
   * Updates the analyzer's internal state from analysis data
   *
   * # Safety
   * This function uses unsafe because it needs to interact with the Node.js runtime
   * through N-API bindings. The caller must ensure the analysis data is valid JSON.
   */
  updateFromAnalysis(analysisData: string): Promise<boolean>
  getConceptRelationships(conceptId: string): Array<string>
}

export interface ApproachPrediction {
  approach: string
  confidence: number
  reasoning: string
  patterns: Array<string>
  complexity: string
}

export interface AstNode {
  nodeType: string
  text: string
  startLine: number
  endLine: number
  startColumn: number
  endColumn: number
  children: Array<AstNode>
}

export interface CodebaseAnalysisResult {
  languages: Array<string>
  frameworks: Array<string>
  complexity: ComplexityMetrics
  concepts: Array<SemanticConcept>
}

export interface ComplexityMetrics {
  cyclomatic: number
  cognitive: number
  lines: number
}

export declare function initCore(): string

export interface LineRange {
  start: number
  end: number
}

export interface LineRange {
  start: number
  end: number
}

export interface ParseResult {
  language: string
  tree: AstNode
  errors: Array<string>
  symbols: Array<symbol>
}

export interface Pattern {
  id: string
  patternType: string
  description: string
  frequency: number
  confidence: number
  examples: Array<PatternExample>
  contexts: Array<string>
}

export interface PatternAnalysisResult {
  detected: Array<string>
  violations: Array<string>
  recommendations: Array<string>
  learned?: Array<Pattern>
}

export interface PatternExample {
  code: string
  filePath: string
  lineRange: LineRange
}

export interface SemanticConcept {
  id: string
  name: string
  conceptType: string
  confidence: number
  filePath: string
  lineRange: LineRange
  relationships: Record<string, string>
  metadata: Record<string, string>
}

export interface Symbol {
  name: string
  symbolType: string
  line: number
  column: number
  scope: string
}
